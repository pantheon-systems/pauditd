name: Build and Release

on:
  push:
    branches:
      - master
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: "1.24.x"
  USE_GO_CACHE: false

jobs:
  deps:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: read
    name: Install dependencies
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Setup Go and Cache Modules"
        uses: ./.github/actions/setup-go-and-cache
        with:
          go-version: ${{ env.GO_VERSION }}
          use-cache: ${{ env.USE_GO_CACHE }}

      - name: "Download dependencies"
        run: go mod download
        working-directory: .

        env:
          GO111MODULE: on

  format:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [deps]
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Setup Go and Cache Modules"
        uses: ./.github/actions/setup-go-and-cache
        with:
          go-version: ${{ env.GO_VERSION }}
          use-cache: ${{ env.USE_GO_CACHE }}

      - name: "Tidy and Format"
        run: |
          echo "==> cleaning up go.mod"
          go mod tidy
          echo "==> formatting go-code"
          go fmt ./...
        working-directory: .

      - name: "Check for uncommitted changes"
        id: changes
        uses: UnicornGlobal/has-changes-action@v1.0.11

      - name: "Fail if uncommitted changes exist"
        if: steps.changes.outputs.changed == '1'
        run: |
          echo "The following files have changed on disk:"
          git status --porcelain
          git --no-pager diff
          exit 1

  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [deps]
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Setup Go and Cache Modules"
        uses: ./.github/actions/setup-go-and-cache
        with:
          go-version: ${{ env.GO_VERSION }}
          use-cache: ${{ env.USE_GO_CACHE }}

      - name: "Run golangci-lint"
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.0
          working-directory: .

  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    needs: [deps]
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Setup Go and Cache Modules"
        uses: ./.github/actions/setup-go-and-cache
        with:
          go-version: ${{ env.GO_VERSION }}
          use-cache: ${{ env.USE_GO_CACHE }}

      - name: "Install go-ctrf-json-reporter"
        run: go install github.com/ctrf-io/go-ctrf-json-reporter/cmd/go-ctrf-json-reporter@latest
        working-directory: .

      - name: "Run Go tests and generate CTRF"
        continue-on-error: true
        run: |
          go test -v -json ./... | go-ctrf-json-reporter -output ctrf-report.json
        working-directory: .

      - name: "Report results to GitHub"
        uses: ctrf-io/github-test-reporter@v1
        with:
          report-path: "./ctrf-report.json"
          reporter: gotest-json

      - name: "Abort if tests failed"
        run: |
          if grep '"Action":"fail"' ctrf-report.json; then
            echo "‚ùå Tests failed"
            exit 1
          fi
        working-directory: .

  goreleaser-check:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Check goreleaser's Configuration"
        uses: ./.github/actions/run-goreleaser
        with:
          args: check
          workdir: .

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [deps]
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Setup Go and Cache Modules"
        uses: ./.github/actions/setup-go-and-cache
        with:
          go-version: ${{ env.GO_VERSION }}
          use-cache: ${{ env.USE_GO_CACHE }}

      - name: "Build RPMs"
        uses: ./.github/actions/run-goreleaser
        with:
          args: release --clean --skip=publish,docker
          workdir: .

      - name: "Upload RPM Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: rpm-artifacts
          path: dist/*.rpm

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    if: github.event_name != 'pull_request'
    needs: [format, lint, test, build, goreleaser-check]
    steps:
      - name: "Setup Ruby"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"  # or another version as required

      - name: "Download RPM Artifacts"
        uses: actions/download-artifact@v3
        with:
          name: rpm-artifacts
          path: dist

      - name: "Install Package Cloud"
        run: gem install package_cloud

      - name: "Publish RPMs to PackageCloud"
        run: |
          for ver in 22 28 29 el/7; do
            package_cloud push pantheon/public/fedora/$ver ./dist/*.rpm
          done

      - name: "Publish GitHub Release (Binary, Checksum, Changelog Only)"
        uses: ./.github/actions/run-goreleaser
        with:
          args: release --clean --skip=nfpm,docker
          workdir: .
