name: Build and Release
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  deps:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          # Keep cache enabled on GitHub Actions, but disable it only when
          # running locally via 'act'.
          cache: ${{ env.ACT != 'true' }}

      - name: Cache go modules
        # If running locally via 'act', skip the cache step
        if: env.ACT != 'true'
        uses: actions/cache@v4
        id: cache
        with:
          path: /home/runner/go/pkg/mod
          key: "dependencies-${{ runner.os }}-${{ hashFiles('go.sum') }}"
          lookup-only: true

      - name: Download dependencies
        run: go mod download

  format:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [deps]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          # Keep cache enabled on GitHub Actions, but disable it only when
          # running locally via 'act'.
          cache: ${{ env.ACT != 'true' }}

      - name: Tidy
        run: |
          echo "==> cleaning up go.mod"
          go mod tidy

      - name: Format
        run: |
          echo "==> formatting go-code"
          go fmt ./...

      - name: Check for uncommitted changes
        id: changes
        uses: UnicornGlobal/has-changes-action@v1.0.11

      - name: Fail if uncommitted changes exist
        if: steps.changes.outputs.changed == '1'
        run: |
          echo "The following files have changed on disk:"
          git status --porcelain
          git --no-pager diff
          exit 1

  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [deps]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          # Keep cache enabled on GitHub Actions, but disable it only when
          # running locally via 'act'.
          cache: ${{ env.ACT != 'true' }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.0

  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    needs: [deps]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          # Keep cache enabled on GitHub Actions, but disable it only when
          # running locally via 'act'.
          cache: ${{ env.ACT != 'true' }}
      
      - name: Install go-ctrf-json-reporter
        run: go install github.com/ctrf-io/go-ctrf-json-reporter/cmd/go-ctrf-json-reporter@latest

      - name: Run tests and convert to CTRF
        run: |
          go test -v -json ./... | go-ctrf-json-reporter -output ctrf-report.json || true

      - name: Report results to GitHub
        uses: ctrf-io/github-test-reporter@v1
        with:
          report-path: './ctrf-report.json'
          reporter: gotest-json

      - name: Abort if tests failed
        run: |
          if grep '"Action":"fail"' test-report.json; then
            echo "❌ Tests failed"
            exit 1
          fi

  goreleaser-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Check goreleaser's Configuration"
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: check

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [deps]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: code
          fetch-tags: true
          fetch-depth: 0

      - name: Cache go modules
        uses: actions/cache@v4
        id: cache
        with:
          path: /home/runner/go/pkg/mod
          key: "dependencies-${{ runner.os }}-${{ hashFiles('go.sum') }}"
          fail-on-cache-miss: true
      
      # - id: tag
      #   uses: pantheon-systems/common-gh/tag@main
      #   with:
      #     push: true
      #     workdir: code
      #   env:
      #     BRANCH: "${{ github.head_ref || github.ref_name }}"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Build RPMs with GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          # @todo: Do we need the RPMs to be built for this binary?
          # Build the RPM, but do not publish (upload) a GitHub release yet.
          args: release --clean --skip=publish,snapshot,docker
          version: "~> v2"
          workdir: code
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload RPM Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rpm-artifacts
          path: code/dist/*.rpm

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    if: github.event_name != 'pull_request'
    needs: [format, lint, test, build, goreleaser-check]
    steps:
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'  # or another version as required

      - name: Download RPM Artifacts
        uses: actions/download-artifact@v3
        with:
          name: rpm-artifacts
          path: dist

      - name: Publish RPMs to PackageCloud
        run: |
          gem install package_cloud
          package_cloud push pantheon/public/fedora/22 ./dist/*.rpm
          package_cloud push pantheon/public/fedora/28 ./dist/*.rpm
          package_cloud push pantheon/public/fedora/29 ./dist/*.rpm
          package_cloud push pantheon/public/el/7 ./dist/*.rpm

      # Publish a GitHub Release, skipping the nfpm (RPM), snapshot, and docker
      # artifacts.
      - name: Publish GitHub Release (Binary, Checksum, Changelog Only)
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release --clean --skip=nfpm,snapshot,docker
          version: "~> v2"
          workdir: code
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
